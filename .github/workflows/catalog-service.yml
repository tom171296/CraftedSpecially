
name: Catalog service CI/CD
run-name: ${{ github.actor }} is building the catalog service ðŸš€

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: crafted-specially/catalog-api
  BUILD_CONFIGURATION: Release

permissions: {}

jobs:

  analysis:
    name: Static/Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Trivy scan (repo)
        run: |
          docker run --rm \
            -e TRIVY_DB_REPOSITORY=public.ecr.aws/aquasecurity/trivy-db,aquasec/trivy-db,ghcr.io/aquasecurity/ \
            -v "${{ github.workspace }}:/src" \
            aquasec/trivy:latest \
            fs -f json --scanners vuln,secret,misconfig \
            --exit-code 1 --severity HIGH,CRITICAL /src

  build:
    runs-on: ubuntu-latest
    needs: analysis
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: nuget-${{ runner.os }}-

      - name: Restore dependencies
        run: dotnet restore ./Services/Catalog/Catalog.Api/Catalog.Api.csproj --locked-mode

      - name: Check for vulnerable dependencies
        run: dotnet list ./Services/Catalog/Catalog.Api/Catalog.Api.csproj package --vulnerable

      - name: Build
        run: dotnet build ./Services/Catalog/Catalog.Api/Catalog.Api.csproj --no-restore --configuration Release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: catalog-api-build-output
          path: |
            **/bin/${{ env.BUILD_CONFIGURATION }}/

      # Docker build and push steps
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build_and_push
        uses: docker/build-push-action@v3
        with:
          context: ./Services
          file: ./Services/Catalog/dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
    
    outputs:
      digest: ${{ steps.build_and_push.outputs.digest }}

  sign_and_provenance:
    name: Sign & Attest
    runs-on: ubuntu-latest
    needs: build
    
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: catalog-api-build-output
          path: dist

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ needs.build.outputs.digest }}
          push-to-registry: true

      - name: Generate SBOM attestation
        uses: actions/attest-sbom@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ needs.build.outputs.digest }}
          push-to-registry: true
          sbom-path: dist/sbom.json

      # - name: Install Cosign
      #   run: |
      #     COSIGN_VERSION=v2.2.4
      #     curl -sL https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64 > /usr/local/bin/cosign
      #     chmod +x /usr/local/bin/cosign

      # - name: Cosign sign artifacts
      #   run: |
      #     for f in $(find dist -type f); do
      #       cosign sign-blob --yes --oidc-issuer https://token.actions.githubusercontent.com --output-signature "$f.sig" "$f"
      #     done